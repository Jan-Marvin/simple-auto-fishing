plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: "${project.mappings_channel}", version: "${project.minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
			
			property 'forge.enabledGameTestNamespaces', 'simpleautofishing'

            mods {
                simpleautofishing {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpleautofishing'

            mods {
                simpleautofishing {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpleautofishing'

            mods {
                simpleautofishing {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'simpleautofishing', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                simpleautofishing {
                    source sourceSets.main
                }
            }
        }
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'mod_version': project.mod_version, 'minecraft_version': project.minecraft_version, 'loader_version': project.loader_version, 'forge_version': project.forge_version
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

processResources {
    filesMatching("mods.toml") {
        expand(project.properties)
    }
}


jar {
    manifest {
        attributes([
				"Specification-Title"     : "simpleautofishing",
				"Specification-Vendor"    : "Jan-Marvin",
				"Specification-Version"   : "1", 
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "Jan-Marvin",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
